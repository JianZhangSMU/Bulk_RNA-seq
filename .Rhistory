show_rownames=F,
show_colnames=T,
fontsize_row=1,
fontsize_col=10)
all_genes = read.table("6_human_samples/DEGs/human_15.VS.human_16.all.table", header=T, row.names = 1)
degs = read.table("6_human_samples/DEGs/human_15.VS.human_16.DEGs.table", header=T, row.names = 1)
head(degs)
barplot(table(degs$regulation),col=c("blue","red"))
table(degs$regulation)
library(ggplot2)
library(pheatmap)
library(tidyverse)
library(dplyr)
library(org.Mm.eg.db)
library(org.Hs.eg.db)
library(GO.db)
library(clusterProfiler)
library(enrichplot)
library(fgsea)
library(DOSE)
library(RcisTarget)
library(DT)
library(reshape2)
library(visNetwork)
mapping = read.table("6_human_samples/mapping.sta.table",header=T, row.names = 1)
row.names(mapping) = c("human_CAG_low_15_1","human_CAG_low_15_2","human_CAG_low_15_3","human_CAG_hi_16_1","human_CAG_hi_16_2","human_CAG_hi_16_3")
mapping
fpkm = read.table("6_human_samples/gene.FPKM.filtered.table", header=T, row.names = 1)
colnames(fpkm) = c("human_CAG_low_15_1","human_CAG_low_15_2","human_CAG_low_15_3","human_CAG_hi_16_1","human_CAG_hi_16_2","human_CAG_hi_16_3")
b=cor(fpkm,method="kendall") #method = c("pearson", "kendall", "spearman")
pheatmap(b)
pheatmap(log10(fpkm+1),
cluster_rows=T,
cluster_cols=F,
show_rownames=F,
show_colnames=T,
fontsize_row=1,
fontsize_col=10)
all_genes = read.table("6_human_samples/DEGs/human_15.VS.human_16.all.table", header=T, row.names = 1)
degs = read.table("6_human_samples/DEGs/human_15.VS.human_16.DEGs.table", header=T, row.names = 1)
head(degs)
barplot(table(degs$regulation),col=c("blue","red"))
normal=read.table("6_human_samples/DEGs/human_15.VS.human_16.normal.for.plot",header=T)
up=read.table("6_human_samples/DEGs/human_15.VS.human_16.Up.for.plot",header=T)
down=read.table("6_human_samples/DEGs/human_15.VS.human_16.Down.for.plot",header=T)
plot(normal,type="p",pch=20,col="gray",xlab="Fold change [log2(human_CAG_hi/human_CAG_low)]",ylab="-Log10(FDR)",xlim=c(-5,5),ylim=c(0,4))
points(up,pch=20,col="red")
points(down,pch=20,col="blue")
abline(h=-log10(0.05),col="green")
abline(v=-1,col="green")
abline(v=1,col="green")
degs_gene_name = as.character(degs$gene)
degs_enrich_go_bp = enrichGO(gene=degs_gene_name,
OrgDb="org.Hs.eg.db",
keyType = "SYMBOL",
ont = "BP",
pvalueCutoff  = 0.01,
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
minGSSize = 5,
maxGSSize = 2000)
dotplot(degs_enrich_go_bp, title="GO (BP) enrichment for DEGs",showCategory=10)
degs_enrich_go_mf = enrichGO(gene=degs_gene_name,
OrgDb="org.Hs.eg.db",
keyType = "SYMBOL",
ont = "MF",
pvalueCutoff  = 0.01,
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
minGSSize = 5,
maxGSSize = 2000)
dotplot(degs_enrich_go_mf, title="GO (MF) enrichment for DEGs",showCategory=10)
# GO enrichment for DEGs
formula_res <- compareCluster(
gene~regulation,
data=degs,
fun="enrichGO",
OrgDb="org.Hs.eg.db",
keyType = "SYMBOL",
ont		   = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05
)
# Run GO enrichment test and merge terms that are close to each other to remove result redundancy
lineage1_ego <- simplify(
formula_res,
cutoff=0.5,
by="p.adjust",
select_fun=min
)
lineage1_ego@compareClusterResult
# Plot both analysis results
dotplot(lineage1_ego, title="GO (BP) enrichment for up and down-regulated DEGs", showCategory=6)
degs_gene_SYMBOL_to_UNIPROT = mapIds(org.Hs.eg.db, degs_gene_name, 'UNIPROT', 'SYMBOL')
p <- enrichKEGG(unname(degs_gene_SYMBOL_to_UNIPROT),
organism = "hsa",
keyType = "uniprot",
# pvalueCutoff  = 0.01,
# pAdjustMethod = "BH",
# qvalueCutoff = 0.05,
minGSSize = 5,
maxGSSize = 2000)#universe=all.genes,use_internal_data=F
dotplot(p, title="KEGG enrichment for DEGs",showCategory=10)
library(ggplot2)
library(pheatmap)
library(tidyverse)
library(dplyr)
library(org.Mm.eg.db)
library(org.Hs.eg.db)
library(GO.db)
library(clusterProfiler)
library(enrichplot)
library(fgsea)
library(DOSE)
library(RcisTarget)
library(DT)
library(reshape2)
library(visNetwork)
mapping = read.table("6_human_samples/mapping.sta.table",header=T, row.names = 1)
row.names(mapping) = c("human_CAG_low_15_1","human_CAG_low_15_2","human_CAG_low_15_3","human_CAG_hi_16_1","human_CAG_hi_16_2","human_CAG_hi_16_3")
mapping
fpkm = read.table("6_human_samples/gene.FPKM.filtered.table", header=T, row.names = 1)
colnames(fpkm) = c("human_CAG_low_15_1","human_CAG_low_15_2","human_CAG_low_15_3","human_CAG_hi_16_1","human_CAG_hi_16_2","human_CAG_hi_16_3")
b=cor(fpkm,method="kendall") #method = c("pearson", "kendall", "spearman")
pheatmap(b)
pheatmap(log10(fpkm+1),
cluster_rows=T,
cluster_cols=F,
show_rownames=F,
show_colnames=T,
fontsize_row=1,
fontsize_col=10)
all_genes = read.table("6_human_samples/DEGs/human_15.VS.human_16.all.table", header=T, row.names = 1)
degs = read.table("6_human_samples/DEGs/human_15.VS.human_16.DEGs.table", header=T, row.names = 1)
datatable(degs,filter="top")
barplot(table(degs$regulation),col=c("blue","red"))
normal=read.table("6_human_samples/DEGs/human_15.VS.human_16.normal.for.plot",header=T)
up=read.table("6_human_samples/DEGs/human_15.VS.human_16.Up.for.plot",header=T)
down=read.table("6_human_samples/DEGs/human_15.VS.human_16.Down.for.plot",header=T)
plot(normal,type="p",pch=20,col="gray",xlab="Fold change [log2(human_CAG_hi/human_CAG_low)]",ylab="-Log10(FDR)",xlim=c(-5,5),ylim=c(0,4))
points(up,pch=20,col="red")
points(down,pch=20,col="blue")
abline(h=-log10(0.05),col="green")
abline(v=-1,col="green")
abline(v=1,col="green")
degs_gene_name = as.character(degs$gene)
degs_enrich_go_bp = enrichGO(gene=degs_gene_name,
OrgDb="org.Hs.eg.db",
keyType = "SYMBOL",
ont = "BP",
pvalueCutoff  = 0.01,
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
minGSSize = 5,
maxGSSize = 2000)
dotplot(degs_enrich_go_bp, title="GO (BP) enrichment for DEGs",showCategory=10)
degs_enrich_go_mf = enrichGO(gene=degs_gene_name,
OrgDb="org.Hs.eg.db",
keyType = "SYMBOL",
ont = "MF",
pvalueCutoff  = 0.01,
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
minGSSize = 5,
maxGSSize = 2000)
dotplot(degs_enrich_go_mf, title="GO (MF) enrichment for DEGs",showCategory=10)
# GO enrichment for DEGs
formula_res <- compareCluster(
gene~regulation,
data=degs,
fun="enrichGO",
OrgDb="org.Hs.eg.db",
keyType = "SYMBOL",
ont		   = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05
)
# Run GO enrichment test and merge terms that are close to each other to remove result redundancy
lineage1_ego <- simplify(
formula_res,
cutoff=0.5,
by="p.adjust",
select_fun=min
)
datatable(lineage1_ego@compareClusterResult,filter="top")
# Plot both analysis results
dotplot(lineage1_ego, title="GO (BP) enrichment for up and down-regulated DEGs", showCategory=6)
degs_gene_SYMBOL_to_UNIPROT = mapIds(org.Hs.eg.db, degs_gene_name, 'UNIPROT', 'SYMBOL')
p <- enrichKEGG(unname(degs_gene_SYMBOL_to_UNIPROT),
organism = "hsa",
keyType = "uniprot",
# pvalueCutoff  = 0.01,
# pAdjustMethod = "BH",
# qvalueCutoff = 0.05,
minGSSize = 5,
maxGSSize = 2000)#universe=all.genes,use_internal_data=F
dotplot(p, title="KEGG enrichment for DEGs",showCategory=10)
library(ggplot2)
library(pheatmap)
library(tidyverse)
library(dplyr)
library(org.Mm.eg.db)
library(org.Hs.eg.db)
library(GO.db)
library(clusterProfiler)
library(enrichplot)
library(fgsea)
library(DOSE)
library(RcisTarget)
library(DT)
library(reshape2)
library(visNetwork)
mapping = read.table("6_mouse_samples/mapping.sta.table",header=T, row.names = 1)
row.names(mapping) = c("mouse_CAG_low_13_1","mouse_CAG_low_13_2","mouse_CAG_low_13_3","mouse_CAG_hi_14_1","mouse_CAG_hi_14_2","mouse_CAG_hi_14_3")
mapping
fpkm = read.table("6_mouse_samples/gene.FPKM.filtered.table", header=T, row.names = 1)
#fpkm = read_table("6_mouse_samples/gene.FPKM.filtered.table")
colnames(fpkm) = c("mouse_CAG_low_13_1","mouse_CAG_low_13_2","mouse_CAG_low_13_3","mouse_CAG_hi_14_1","mouse_CAG_hi_14_2","mouse_CAG_hi_14_3")
b=cor(fpkm,method="kendall") #method = c("pearson", "kendall", "spearman")
pheatmap(b)
pheatmap(log10(fpkm+1),
cluster_rows=T,
cluster_cols=F,
show_rownames=F,
show_colnames=T,
fontsize_row=1,
fontsize_col=10)
all_genes = read.table("6_mouse_samples/DEGs/mouse_13.VS.mouse_14.all.table", header=T, row.names = 1)
degs = read.table("6_mouse_samples/DEGs/mouse_13.VS.mouse_14.DEGs.table", header=T, row.names = 1)
datatable(degs,filter="top")
barplot(table(degs$regulation),col=c("blue","red"))
normal=read.table("6_mouse_samples/DEGs/mouse_13.VS.mouse_14.normal.for.plot",header=T)
up=read.table("6_mouse_samples/DEGs/mouse_13.VS.mouse_14.Up.for.plot",header=T)
down=read.table("6_mouse_samples/DEGs/mouse_13.VS.mouse_14.Down.for.plot",header=T)
plot(normal,type="p",pch=20,col="gray",xlab="Fold change [log2(mouse_CAG_hi/mouse_CAG_low)]",ylab="-Log10(FDR)",xlim=c(-5,5),ylim=c(0,4))
points(up,pch=20,col="red")
points(down,pch=20,col="blue")
abline(h=-log10(0.05),col="green")
abline(v=-1,col="green")
abline(v=1,col="green")
#sapply(degs,mode)
degs_ensemble_id = as.character(degs$gene_id)
degs_gene_name = as.character(degs$gene)
degs_enrich_go_bp = enrichGO(gene=degs_gene_name,
OrgDb="org.Mm.eg.db",
keyType = "SYMBOL",
ont = "BP",
pvalueCutoff  = 0.01,
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
minGSSize = 5,
maxGSSize = 2000)
dotplot(degs_enrich_go_bp, title="GO (BP) enrichment for DEGs",showCategory=10)
degs_enrich_go_mf = enrichGO(gene=degs_gene_name,
OrgDb="org.Mm.eg.db",
keyType = "SYMBOL",
ont = "MF",
pvalueCutoff  = 0.01,
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
minGSSize = 5,
maxGSSize = 2000)
dotplot(degs_enrich_go_mf, title="GO (MF) enrichment for DEGs",showCategory=10)
# GO enrichment for DEGs
formula_res <- compareCluster(
gene~regulation,
data=degs,
fun="enrichGO",
OrgDb="org.Mm.eg.db",
keyType = "SYMBOL",
ont		   = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05
)
# Run GO enrichment test and merge terms that are close to each other to remove result redundancy
lineage1_ego <- simplify(
formula_res,
cutoff=0.5,
by="p.adjust",
select_fun=min
)
datatable(lineage1_ego@compareClusterResult,filter="top")
# Plot both analysis results
dotplot(lineage1_ego, title="GO (BP) enrichment for up and down-regulated DEGs", showCategory=10)
all_genes = transform(all_genes, gene_id=as.character(gene_id))
all_genes = transform(all_genes, gene=as.character(gene))
all_genes = data.frame(all_genes)
genes_in_Go_term = lineage1_ego@compareClusterResult[lineage1_ego@compareClusterResult$Description == "cell-cell signaling by wnt",]$geneID
genes_in_Go_term = as.character(genes_in_Go_term)
genes_in_Go_term = unlist(strsplit(genes_in_Go_term,"/"))
genes_ensemble_ID_in_Go_term = all_genes[all_genes$gene %in% genes_in_Go_term,]$gene_id
genes_fpkm = fpkm[genes_ensemble_ID_in_Go_term,]
row.names(genes_fpkm) = all_genes[all_genes$gene_id %in% genes_ensemble_ID_in_Go_term,]$gene
pheatmap(log10(genes_fpkm+1),
cluster_rows=T,
cluster_cols=F,
show_rownames=T,
show_colnames=T,
fontsize_row=10,
fontsize_col=12)
genes_in_Go_term = lineage1_ego@compareClusterResult[lineage1_ego@compareClusterResult$Description == "regulation of cell-cell adhesion",]$geneID
genes_in_Go_term = as.character(genes_in_Go_term)
genes_in_Go_term = unlist(strsplit(genes_in_Go_term,"/"))
genes_ensemble_ID_in_Go_term = all_genes[all_genes$gene %in% genes_in_Go_term,]$gene_id
genes_fpkm = fpkm[genes_ensemble_ID_in_Go_term,]
row.names(genes_fpkm) = all_genes[all_genes$gene_id %in% genes_ensemble_ID_in_Go_term,]$gene
pheatmap(log10(genes_fpkm+1),
cluster_rows=T,
cluster_cols=F,
show_rownames=T,
show_colnames=T,
fontsize_row=10,
fontsize_col=12)
genes_in_Go_term = lineage1_ego@compareClusterResult[lineage1_ego@compareClusterResult$Description == "muscle cell proliferation",]$geneID
genes_in_Go_term = as.character(genes_in_Go_term)
genes_in_Go_term = unlist(strsplit(genes_in_Go_term,"/"))
genes_ensemble_ID_in_Go_term = all_genes[all_genes$gene %in% genes_in_Go_term,]$gene_id
genes_fpkm = fpkm[genes_ensemble_ID_in_Go_term,]
row.names(genes_fpkm) = all_genes[all_genes$gene_id %in% genes_ensemble_ID_in_Go_term,]$gene
pheatmap(log10(genes_fpkm+1),
cluster_rows=T,
cluster_cols=F,
show_rownames=T,
show_colnames=T,
fontsize_row=10,
fontsize_col=12)
# #Convert Gene Symbols to Entrez IDs in R
# # Run columns(org.Hs.eg.db) to see available identifiers that can be used in this package. There are actually a lot of things such as Ensembl IDs, Uniprot IDs, protein families and GO annotations:
# columns(org.Mm.eg.db)
# columns(org.Hs.eg.db)
# # Let’s make a sample gene symbol list to work with and do the conversion using mapIds which required 4 arguments, the first is the object itself, the second is the list of identifiers (symbols in this case), the third is the identifier type we want to convert to, and the last is the type of identifier for the second argument:
# symbols <- c('AHNAK', 'BOD1L1', 'HSPB1', 'SMARCA4', 'TRIM28')
# mapIds(org.Hs.eg.db, symbols, 'ENTREZID', 'SYMBOL')
degs_gene_SYMBOL_to_UNIPROT = mapIds(org.Mm.eg.db, degs_gene_name, 'UNIPROT', 'SYMBOL')
# degs_gene_SYMBOL_to_UNIPROT = select(org.Mm.eg.db,
#                                      keys = degs_gene_name,
#                                      columns = c("UNIPROT","SYMBOL"),
#                                      keytype = "SYMBOL")
degs_KEGG_enrichment <- enrichKEGG(unname(degs_gene_SYMBOL_to_UNIPROT),
organism = "mmu",
keyType = "uniprot",
pvalueCutoff  = 0.01,
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
minGSSize = 5,
maxGSSize = 2000)#universe=all.genes,use_internal_data=F
dotplot(degs_KEGG_enrichment, title="KEGG enrichment for DEGs",showCategory=10)
genes_in_kegg = degs_KEGG_enrichment@result[degs_KEGG_enrichment@result$Description == "Parkinson disease",]$geneID
genes_in_kegg = as.character(genes_in_kegg)
genes_in_kegg = unlist(strsplit(genes_in_kegg,"/"))
genes_in_kegg_UNIPROT_to_ensemble_ID = mapIds(org.Mm.eg.db, genes_in_kegg, 'ENSEMBL', 'UNIPROT')
genes_fpkm = fpkm[unname(genes_in_kegg_UNIPROT_to_ensemble_ID),]
row.names(genes_fpkm) = all_genes[all_genes$gene_id %in% unname(genes_in_kegg_UNIPROT_to_ensemble_ID),]$gene
pheatmap(log10(genes_fpkm+1),
cluster_rows=T,
cluster_cols=F,
show_rownames=T,
show_colnames=T,
fontsize_row=10,
fontsize_col=12)
genes_in_kegg = degs_KEGG_enrichment@result[degs_KEGG_enrichment@result$Description == "Huntington disease",]$geneID
genes_in_kegg = as.character(genes_in_kegg)
genes_in_kegg = unlist(strsplit(genes_in_kegg,"/"))
genes_in_kegg_UNIPROT_to_ensemble_ID = mapIds(org.Mm.eg.db, genes_in_kegg, 'ENSEMBL', 'UNIPROT')
genes_fpkm = fpkm[unname(genes_in_kegg_UNIPROT_to_ensemble_ID),]
row.names(genes_fpkm) = all_genes[all_genes$gene_id %in% unname(genes_in_kegg_UNIPROT_to_ensemble_ID),]$gene
pheatmap(log10(genes_fpkm+1),
cluster_rows=T,
cluster_cols=F,
show_rownames=T,
show_colnames=T,
fontsize_row=10,
fontsize_col=12)
genes_in_kegg = degs_KEGG_enrichment@result[degs_KEGG_enrichment@result$Description == "Alzheimer disease",]$geneID
genes_in_kegg = as.character(genes_in_kegg)
genes_in_kegg = unlist(strsplit(genes_in_kegg,"/"))
genes_in_kegg_UNIPROT_to_ensemble_ID = mapIds(org.Mm.eg.db, genes_in_kegg, 'ENSEMBL', 'UNIPROT')
genes_fpkm = fpkm[unname(genes_in_kegg_UNIPROT_to_ensemble_ID),]
row.names(genes_fpkm) = all_genes[all_genes$gene_id %in% unname(genes_in_kegg_UNIPROT_to_ensemble_ID),]$gene
pheatmap(log10(genes_fpkm+1),
cluster_rows=T,
cluster_cols=F,
show_rownames=T,
show_colnames=T,
fontsize_row=10,
fontsize_col=12)
# Load gene sets to analyze. e.g.:
geneSet1 <- as.character(degs[degs$regulation == "up",]$gene)
geneLists <- list("UpDEGs" = geneSet1)
# Select motif database to use (i.e. organism and distance around TSS)
# mouse:
data(motifAnnotations_mgi)
# human:
#data(motifAnnotations_hgnc)
motifRankings <- importRankings("D:/cisTarget_databases/mm9-tss-centered-10kb-7species.mc9nr.feather")
# Motif enrichment analysis:
motifEnrichmentTable_wGenes <- cisTarget(geneLists, motifRankings,
motifAnnot=motifAnnotations_mgi)
# 1. Calculate AUC
motifs_AUC <- calcAUC(geneLists, motifRankings)
# 2. Select significant motifs, add TF annotation & format as table
motifEnrichmentTable <- addMotifAnnotation(motifs_AUC,
# nesThreshold=3,
# highlightTFs=list(UpDEGs="Srf"),
motifAnnot=motifAnnotations_mgi
)
# 3. Identify significant genes for each motif
# (i.e. genes from the gene set in the top of the ranking)
# Note: Method 'iCisTarget' instead of 'aprox' is more accurate, but slower
motifEnrichmentTable_wGenes <- addSignificantGenes(motifEnrichmentTable,
geneSets=geneLists,
# nCores=1,
# method="aprox",
rankings=motifRankings
)
motifEnrichmentTable_wGenes_wLogo <- addLogo(motifEnrichmentTable_wGenes)
resultsSubset <- motifEnrichmentTable_wGenes_wLogo[1:20,]
datatable(resultsSubset[,-c("enrichedGenes", "TF_lowConf"), with=FALSE],
escape = FALSE, # To show the logo
filter="top", options=list(pageLength=5))
anotatedTfs <- lapply(split(motifEnrichmentTable_wGenes$TF_highConf,
motifEnrichmentTable$geneSet),
function(x) {
genes <- gsub(" \\(.*\\). ", "; ", x, fixed=FALSE)
genesSplit <- unique(unlist(strsplit(genes, "; ")))
return(genesSplit)
})
anotatedTfs$UpDEGs
signifMotifNames <- motifEnrichmentTable$motif[1:3]
incidenceMatrix <- getSignificantGenes(geneLists$UpDEGs,
motifRankings,
signifRankingNames=signifMotifNames,
plotCurve=TRUE, maxRank=5000-20,
genesFormat="incidMatrix",
method="aprox")$incidMatrix
edges <- melt(incidenceMatrix)
edges <- edges[which(edges[,3]==1),1:2]
colnames(edges) <- c("from","to")
motifs <- unique(as.character(edges[,1]))
genes <- unique(as.character(edges[,2]))
nodes <- data.frame(id=c(motifs, genes),
label=c(motifs, genes),
title=c(motifs, genes), # tooltip
shape=c(rep("diamond", length(motifs)), rep("elypse", length(genes))),
color=c(rep("purple", length(motifs)), rep("skyblue", length(genes))))
visNetwork(nodes, edges) %>% visOptions(highlightNearest = TRUE,
nodesIdSelection = TRUE)
# Load gene sets to analyze. e.g.:
geneSet1 <- as.character(degs[degs$regulation == "down",]$gene)
geneLists <- list("DownDEGs" = geneSet1)
# Select motif database to use (i.e. organism and distance around TSS)
# mouse:
data(motifAnnotations_mgi)
# human:
#data(motifAnnotations_hgnc)
motifRankings <- importRankings("D:/cisTarget_databases/mm9-tss-centered-10kb-7species.mc9nr.feather")
# Motif enrichment analysis:
motifEnrichmentTable_wGenes <- cisTarget(geneLists,
motifRankings,
motifAnnot=motifAnnotations_mgi)
# 1. Calculate AUC
motifs_AUC <- calcAUC(geneLists, motifRankings)
# 2. Select significant motifs, add TF annotation & format as table
motifEnrichmentTable <- addMotifAnnotation(motifs_AUC,
# nesThreshold=3,
# highlightTFs=list(UpDEGs="Srf"),
motifAnnot=motifAnnotations_mgi
)
# 3. Identify significant genes for each motif
# (i.e. genes from the gene set in the top of the ranking)
# Note: Method 'iCisTarget' instead of 'aprox' is more accurate, but slower
motifEnrichmentTable_wGenes <- addSignificantGenes(motifEnrichmentTable,
geneSets=geneLists,
# nCores=1,
# method="aprox",
rankings=motifRankings
)
motifEnrichmentTable_wGenes_wLogo <- addLogo(motifEnrichmentTable_wGenes)
resultsSubset <- motifEnrichmentTable_wGenes_wLogo[1:20,]
datatable(resultsSubset[,-c("enrichedGenes", "TF_lowConf"), with=FALSE],
escape = FALSE, # To show the logo
filter="top", options=list(pageLength=5))
anotatedTfs <- lapply(split(motifEnrichmentTable_wGenes$TF_highConf,
motifEnrichmentTable$geneSet),
function(x) {
genes <- gsub(" \\(.*\\). ", "; ", x, fixed=FALSE)
genesSplit <- unique(unlist(strsplit(genes, "; ")))
return(genesSplit)
})
anotatedTfs$DownDEGs
signifMotifNames <- motifEnrichmentTable$motif[1:3]
incidenceMatrix <- getSignificantGenes(geneLists$DownDEGs,
motifRankings,
signifRankingNames=signifMotifNames,
plotCurve=TRUE, maxRank=5000-20,
genesFormat="incidMatrix",
method="aprox")$incidMatrix
edges <- melt(incidenceMatrix)
edges <- edges[which(edges[,3]==1),1:2]
colnames(edges) <- c("from","to")
motifs <- unique(as.character(edges[,1]))
genes <- unique(as.character(edges[,2]))
nodes <- data.frame(id=c(motifs, genes),
label=c(motifs, genes),
title=c(motifs, genes), # tooltip
shape=c(rep("diamond", length(motifs)), rep("elypse", length(genes))),
color=c(rep("purple", length(motifs)), rep("skyblue", length(genes))))
visNetwork(nodes, edges) %>% visOptions(highlightNearest = TRUE,
nodesIdSelection = TRUE)
